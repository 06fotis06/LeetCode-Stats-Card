!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const o={username:null,style:"default",animation:!0,width:500,height:200,border:1};async function a(e){const t=await async function(){return(await fetch("https://leetcode.com/",{headers:{"user-agent":"Mozilla/5.0 Leetcode Stats Card v1"}}).then(e=>e.headers.get("set-cookie"))).split(";").map(e=>e.trim().split("=")).find(e=>e[0].includes("csrftoken"))[1]}(),n=await fetch("https://leetcode.com/graphql",{method:"POST",headers:{"content-type":"application/json",origin:"https://leetcode.com",referer:`https://leetcode.com/${e}/`,cookie:`csrftoken=${t}; `,"x-csrftoken":t,"user-agent":"Mozilla/5.0 Leetcode Stats Card v1"},body:JSON.stringify({operationName:"getUserProfile",variables:{username:e},query:"\n            query getUserProfile($username: String!) {\n                allQuestionsCount {\n                    difficulty\n                    count\n                }\n                matchedUser(username: $username) {\n                    username\n                    socialAccounts\n                    githubUrl\n                    contributions {\n                        points\n                        questionCount\n                        testcaseCount\n                    }\n                    profile {\n                        realName\n                        websites\n                        countryName\n                        skillTags\n                        company\n                        school\n                        starRating\n                        aboutMe\n                        userAvatar\n                        reputation\n                        ranking\n                    }\n                    submissionCalendar\n                    submitStats {\n                        acSubmissionNum {\n                            difficulty\n                            count\n                            submissions\n                        }\n                        totalSubmissionNum {\n                            difficulty\n                            count\n                            submissions\n                        }\n                    }\n                    badges {\n                        id\n                        displayName\n                        icon\n                        creationDate\n                    }\n                    upcomingBadges {\n                        name\n                        icon\n                    }\n                    activeBadge {\n                        id\n                    }\n                }\n            }\n            "})}).then(e=>e.json());return{username:n.data.matchedUser.username,profile:{name:n.data.matchedUser.profile.realName||null,avatar:n.data.matchedUser.profile.userAvatar||null,about:n.data.matchedUser.profile.aboutMe,country:n.data.matchedUser.profile.countryName||null,skills:n.data.matchedUser.profile.skillsTags,company:n.data.matchedUser.profile.company||null,school:n.data.matchedUser.profile.school||null,ranking:n.data.matchedUser.profile.ranking,reputation:n.data.matchedUser.profile.reputation},social:{website:n.data.matchedUser.profile.websites.length?n.data.matchedUser.profile.websites[0]:null,github:n.data.matchedUser.githubUrl||null},contribution:{point:n.data.matchedUser.contributions.points,question:n.data.matchedUser.contributions.questionCount,testcase:n.data.matchedUser.contributions.testcaseCount},calendar:JSON.parse(n.data.matchedUser.submissionCalendar),problem:{all:{total:n.data.allQuestionsCount.find(e=>"All"===e.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(e=>"All"===e.difficulty).count},easy:{total:n.data.allQuestionsCount.find(e=>"Easy"===e.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Easy"===e.difficulty).count},medium:{total:n.data.allQuestionsCount.find(e=>"Medium"===e.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Medium"===e.difficulty).count},hard:{total:n.data.allQuestionsCount.find(e=>"Hard"===e.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Hard"===e.difficulty).count}},badge:{active:n.data.matchedUser.activeBadge,owned:n.data.matchedUser.badges.map(e=>(e.icon.includes("http")||(e.icon="https://leetcode.com"+e.icon),e)),upcoming:n.data.matchedUser.upcomingBadges.map(e=>(e.icon.includes("http")||(e.icon="https://leetcode.com"+e.icon),e))}}}const r=[["rect#background",{fill:"#ffffff"}],["text",{"font-family":'"Segoe UI", "PingFang SC", Ubuntu, Sans-Serif',"font-weight":"bold",fill:"rgb(38, 38, 38)"}],["text.sub",{fill:"rgb(128, 128, 128)"}],["circle.circle",{"transform-box":"fill-box",transform:"rotate(-90deg)"}]],s=[["path#L",{fill:"#ffffff"}],["rect#background",{fill:"#101010"}],["text",{fill:"rgb(240, 240, 240)"}],["text.sub",{fill:"rgb(220, 220, 220)"}],["circle.circle_bg, line.progress_bg",{stroke:"rgb(64, 64, 64)"}]],i="\n@keyframes fade_in {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n".split("\n").map(e=>e.trim()).join(" "),l=[["#icon",{opacity:0}],["#username",{opacity:0}],["#rank",{opacity:0}],[".circle_bg",{opacity:0}],[".circle",{opacity:0}],["#total_solved",{opacity:0}],["#easy_solved .difficulty",{opacity:0}],["#easy_solved .solved",{opacity:0}],["#easy_solved .progress_bg",{opacity:0}],["#easy_solved .progress",{opacity:0}],["#medium_solved .difficulty",{opacity:0}],["#medium_solved .solved",{opacity:0}],["#medium_solved .progress_bg",{opacity:0}],["#medium_solved .progress",{opacity:0}],["#hard_solved .difficulty",{opacity:0}],["#hard_solved .solved",{opacity:0}],["#hard_solved .progress_bg",{opacity:0}],["#hard_solved .progress",{opacity:0}]];for(let e=0;e<l.length;e++)l[e][1].animation=`fade_in 1 0.3s ${.1*e}s forwards`;function c(e,t){const[n,o]=function(e=500,t=200){return[`<svg xmlns="http://www.w3.org/2000/svg" width="${e}" height="${t}" viewBox="0 0 500 200" fill="none">`,"</svg>"]}(t.width,t.height);return`${n}\n<style>${function(e){let t="";return r.forEach(e=>{t+=`${e[0]}{${Object.entries(e[1]).map(e=>e[0]+":"+e[1]+";").join("")}} `}),"auto"==e.style&&(t+="@media (prefers-color-scheme: dark) { ",s.forEach(e=>{t+=`${e[0]}{${Object.entries(e[1]).map(e=>e[0]+":"+e[1]+";").join("")}} `}),t+="} "),"dark"==e.style&&s.forEach(e=>{t+=`${e[0]}{${Object.entries(e[1]).map(e=>e[0]+":"+e[1]+";").join("")}} `}),"false"!=e.animation&&0!=Number(e.animation)&&(l.forEach(e=>{t+=`${e[0]}{${Object.entries(e[1]).map(e=>e[0]+":"+e[1]+";").join("")}} `}),t+=i),t}(t)}</style>\n<rect id="background" stroke="lightgray" stroke-width="${t.border}" width="${500-t.border}" height="${200-t.border}" x="${t.border/2}" y="${t.border/2}" rx="4" />\n<g id="icon" transform="translate(20, 15)">${function(e=25,t=25){return`\n    <svg id="leetcode_icon" width="${e}" height="${t}" viewBox="0 0 94 111" version="1.1"\n        xmlns="http://www.w3.org/2000/svg"\n        xmlns:xlink="http://www.w3.org/1999/xlink">\n        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n            <g transform="translate(-2093.000000, -290.000000)">\n                <g id="1_black" transform="translate(2093.000000, 290.000000)">\n                    <path id="C" fill="#FFA116" fill-rule="nonzero" d="M67.5068339,83.0664138 C70.0005384,80.5763786 74.0371402,80.5828822 76.5228362,83.0809398 C79.0085322,85.5789975 79.00204,89.6226456 76.5083355,92.1126808 L65.4351451,103.169577 C55.2192332,113.370744 38.5604663,113.518673 28.1722578,103.513204 C28.112217,103.455678 23.486583,98.9201326 8.22702585,83.9570195 C-1.92478479,74.0028895 -2.93614945,58.0748736 6.61697549,47.8463644 L24.4286944,28.7745461 C33.9100043,18.6218594 51.3874487,17.5122246 62.2279907,26.2789232 L78.4052912,39.3620235 C81.1448956,41.5776292 81.5728103,45.5984975 79.3610655,48.3428842 C77.1493207,51.0872709 73.1354592,51.5159327 70.3958548,49.300327 L54.2186634,36.2173149 C48.5492813,31.6325105 38.631911,32.2621597 33.7398535,37.5006265 L15.9279056,56.5726899 C11.2772073,61.552182 11.7865613,69.5740156 17.1461283,74.8292186 C28.3515339,85.8169393 36.9874071,94.2846214 36.9973988,94.294225 C42.3981571,99.4959838 51.130862,99.418438 56.43358,94.1233737 L67.5068339,83.0664138 Z"></path>\n                    <path id="dash" fill="#B3B3B3" d="M40.6069914,72.0014117 C37.086019,72.0014117 34.2317068,69.142117 34.2317068,65.6149982 C34.2317068,62.0878794 37.086019,59.2285847 40.6069914,59.2285847 L87.6247154,59.2285847 C91.1456879,59.2285847 94,62.0878794 94,65.6149982 C94,69.142117 91.1456879,72.0014117 87.6247154,72.0014117 L40.6069914,72.0014117 Z"></path>\n                    <path id="L" fill="#000000" d="M49.4124315,2.02335002 C51.8178981,-0.552320454 55.852269,-0.686893945 58.4234511,1.72277172 C60.9946333,4.13243738 61.1289722,8.17385083 58.7235056,10.7495213 L15.9282277,56.5728697 C11.2773659,61.551984 11.7867168,69.5737689 17.1459309,74.8291832 L36.9094236,94.2091099 C39.4255514,96.6764051 39.4686234,100.719828 37.0056277,103.240348 C34.5426319,105.760868 30.5062548,105.804016 27.990127,103.33672 L8.22654289,83.9567041 C-1.92467414,74.0021005 -2.93603527,58.0741402 6.61751533,47.846311 L49.4124315,2.02335002 Z"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n    `}(30,30)}</g>\n<text id="username" transform="translate(65, 40)" style="font-size: 24px;">${e.username}</text>\n<text id="rank" class="sub" text-anchor="end" transform="translate(480, 40)" style="font-size: 18px;">#${e.profile.ranking>1e5?"100000+":e.profile.ranking}</text>\n\n<g transform="translate(30, 85)">\n    <circle class="circle_bg" cx="40" cy="40" r="40" stroke="#e5e5e5" stroke-width="6" />\n    <circle class="circle" cx="40" cy="40" r="40" stroke="#FFA116" stroke-width="6" stroke-linecap="round" stroke-dasharray="${80*Math.PI*(e.problem.all.solved/e.problem.all.total)} 1000" transform-origin="40px 40px" />\n    <g>\n        <text id="total_solved" x="40" y="40" style="font-size: 28px;" alignment-baseline="central" dominant-baseline="central" text-anchor="middle">${e.problem.all.solved}</text>\n    </g>\n</g>\n\n<g transform="translate(160, 80)">\n    <g id="easy_solved" transform="translate(0, 0)">\n        <text class="difficulty" style="font-size: 18px;">Easy</text>\n        <text class="sub solved" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${e.problem.easy.solved} / ${e.problem.easy.total}</text>\n        <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" stroke="#e5e5e5" stroke-width="4" stroke-linecap="round" />\n        <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#5cb85c" stroke-width="4" stroke-dasharray="${e.problem.easy.solved/e.problem.easy.total*300} 1000" stroke-linecap="round" />\n    </g>\n    <g id="medium_solved" transform="translate(0, 40)">\n        <text class="difficulty" style="font-size: 18px;">Medium</text>\n        <text class="sub solved" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${e.problem.medium.solved} / ${e.problem.medium.total}</text>\n        <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" stroke="#e5e5e5" stroke-width="4" stroke-linecap="round" />\n        <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#f0ad4e" stroke-width="4" stroke-dasharray="${e.problem.medium.solved/e.problem.medium.total*300} 1000" stroke-linecap="round" />\n    </g>\n    <g id="hard_solved" transform="translate(0, 80)">\n        <text class="difficulty" style="font-size: 18px;">Hard</text>\n        <text class="sub solved" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${e.problem.hard.solved} / ${e.problem.hard.total}</text>\n        <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" stroke="#e5e5e5" stroke-width="4" stroke-linecap="round" />\n        <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#d9534f" stroke-width="4" stroke-dasharray="${e.problem.hard.solved/e.problem.hard.total*300} 1000" stroke-linecap="round" />\n    </g>\n</g>\n${o}`}!async function(){addEventListener("fetch",e=>{let t=async function(e){const t=e.request;if("GET"!==t.method)return new Response("Allowed Method: GET");if("https://leetcode-card.jacob.workers.dev/favicon.ico"==t.url)return Response.redirect("https://raw.githubusercontent.com/JacobLinCool/leetcode-stats-card/main/favicon/leetcode.ico",301);const n=function(e){let t={};return[...e.entries()].forEach(e=>{t[e[0]]=e[1]}),Object.assign({},o,t)}(new URL(t.url).searchParams);if(console.log("Final Parameters",n),n.username){const o=new Request(t.url,t),s=caches.default;let i=await s.match(o);if(!i){try{const e=await a(n.username);console.log("Leetcode Data",e),i=new Response(c(e,n),{headers:{"Content-Type":"image/svg+xml; charset=utf-8","Cache-Control":"s-maxage=60"}}),(r=i.headers).set("Access-Control-Allow-Origin","*"),r.set("Access-Control-Allow-Credentials",!0)}catch(e){return new Response("User Not Found",{headers:{"Content-Type":"text/plain; charset=utf-8"},status:404,statusText:"Not Found"})}e.waitUntil(s.put(o,i.clone()))}return i}return new Response('\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8" />\n        <link rel="icon" href="https://raw.githubusercontent.com/JacobLinCool/leetcode-stats-card/main/favicon/leetcode.ico" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n        <title>LeetCode Stats Card</title>\n        <meta property="og:title" content="LeetCode Stats Card" />\n        <meta property="og:description" content="A simple tool for every leetcoder. Show your leetcode stats on your GitHub profile or your website!" />\n    </head>\n    <body>\n        <h1>LeetCode Stats Card</h1>\n        <input id="username" placeholder="Your LeetCode Username">\n        <select id="style">\n            <option value="default" selected>Default</option>\n            <option value="dark">Dark</option>\n            <option value="auto">Auto</option>\n        </select>\n        <div>\n            <button onclick="preview()">Preview</button>\n            <button onclick="go()">Go</button>\n        </div>\n        <div>\n            <img id="preview" src="https://leetcode-card.jacob.workers.dev/?username=JacobLinCool"></img>\n        </div>\n        <div>\n            <a href="https://github.com/JacobLinCool/leetcode-stats-card">View on GitHub</a>\n        </div>\n        <style>\n            html, body {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n\n                font-family: sans-serif;\n            }\n            h1 {\n                margin: 8px 0;\n            }\n            input, select {\n                width: 320px;\n                margin: 8px 0;\n                padding: 2px;\n            }\n            button {\n                width: 100px;\n                margin: 8px;\n            }\n            div {\n                width: 320px;\n                margin: 8px 0;\n\n                display: flex;\n                flex-direction: row;\n                justify-content: center;\n                align-items: center;\n            }\n            img {\n                width: 100%;\n            }\n        </style>\n        <script>\n            function url() {\n                return location.origin + "/?username=" + document.querySelector("#username").value.trim() + "&style=" + document.querySelector("#style").value;\n            }\n            function preview() {\n                document.querySelector("#preview").src = url();\n            }\n            function go() {\n                let win = window.open();\n                win.location = url()\n            }\n        <\/script>\n    </body>\n</html>\n',{headers:{"Content-Type":"text/html; charset=utf-8"}});var r}(e);e.respondWith(t)})}()}]);