!function(t){var e={};function n(a){if(e[a])return e[a].exports;var r=e[a]={i:a,l:!1,exports:{}};return t[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,a){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(a,r,function(e){return t[e]}.bind(null,r));return a},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);const a={username:null,style:"default",top:"4,icon,4,username|4,rank,4",body:"total,detail"};async function r(t){const e=await async function(){return(await fetch("https://leetcode.com/",{headers:{"user-agent":"Mozilla/5.0 Leetcode Stats Card v1"}}).then(t=>t.headers.get("set-cookie"))).split(";").map(t=>t.trim().split("=")).find(t=>t[0].includes("csrftoken"))[1]}(),n=await fetch("https://leetcode.com/graphql",{method:"POST",headers:{"content-type":"application/json",origin:"https://leetcode.com",referer:`https://leetcode.com/${t}/`,cookie:`csrftoken=${e}; `,"x-csrftoken":e,"user-agent":"Mozilla/5.0 Leetcode Stats Card v1"},body:JSON.stringify({operationName:"getUserProfile",variables:{username:t},query:"\n            query getUserProfile($username: String!) {\n                allQuestionsCount {\n                    difficulty\n                    count\n                }\n                matchedUser(username: $username) {\n                    username\n                    socialAccounts\n                    githubUrl\n                    contributions {\n                        points\n                        questionCount\n                        testcaseCount\n                    }\n                    profile {\n                        realName\n                        websites\n                        countryName\n                        skillTags\n                        company\n                        school\n                        starRating\n                        aboutMe\n                        userAvatar\n                        reputation\n                        ranking\n                    }\n                    submissionCalendar\n                    submitStats {\n                        acSubmissionNum {\n                            difficulty\n                            count\n                            submissions\n                        }\n                        totalSubmissionNum {\n                            difficulty\n                            count\n                            submissions\n                        }\n                    }\n                    badges {\n                        id\n                        displayName\n                        icon\n                        creationDate\n                    }\n                    upcomingBadges {\n                        name\n                        icon\n                    }\n                    activeBadge {\n                        id\n                    }\n                }\n            }\n            "})}).then(t=>t.json());return{username:n.data.matchedUser.username,profile:{name:n.data.matchedUser.profile.realName||null,avatar:n.data.matchedUser.profile.userAvatar||null,about:n.data.matchedUser.profile.aboutMe,country:n.data.matchedUser.profile.countryName||null,skills:n.data.matchedUser.profile.skillsTags,company:n.data.matchedUser.profile.company||null,school:n.data.matchedUser.profile.school||null,ranking:n.data.matchedUser.profile.ranking,reputation:n.data.matchedUser.profile.reputation},social:{website:n.data.matchedUser.profile.websites.length?n.data.matchedUser.profile.websites[0]:null,github:n.data.matchedUser.githubUrl||null},contribution:{point:n.data.matchedUser.contributions.points,question:n.data.matchedUser.contributions.questionCount,testcase:n.data.matchedUser.contributions.testcaseCount},calendar:JSON.parse(n.data.matchedUser.submissionCalendar),problem:{all:{total:n.data.allQuestionsCount.find(t=>"All"===t.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(t=>"All"===t.difficulty).count},easy:{total:n.data.allQuestionsCount.find(t=>"Easy"===t.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(t=>"Easy"===t.difficulty).count},medium:{total:n.data.allQuestionsCount.find(t=>"Medium"===t.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(t=>"Medium"===t.difficulty).count},hard:{total:n.data.allQuestionsCount.find(t=>"Hard"===t.difficulty).count,solved:n.data.matchedUser.submitStats.acSubmissionNum.find(t=>"Hard"===t.difficulty).count}},badge:{active:n.data.matchedUser.activeBadge,owned:n.data.matchedUser.badges.map(t=>(t.icon.includes("http")||(t.icon="https://leetcode.com"+t.icon),t)),upcoming:n.data.matchedUser.upcomingBadges.map(t=>(t.icon.includes("http")||(t.icon="https://leetcode.com"+t.icon),t))}}}const o=[["text",{"font-family":'"Segoe UI", "PingFang SC", Ubuntu, Sans-Serif',"font-weight":"bold",fill:"rgb(38, 38, 38)"}],["text.sub",{fill:"rgb(128, 128, 128)"}]],s=[["path#L",{fill:"#ffffff"}],["rect#background",{fill:"#101010"}],["text",{fill:"rgb(218, 218, 218)"}],["text.sub",{fill:"rgb(160, 160, 160)"}]];function i(t,e){const[n,a]=function(t=500,e=200){return[`<svg xmlns="http://www.w3.org/2000/svg" width="${t}" height="${e}" viewBox="0 0 ${t} ${e}" fill="none">`,"</svg>"]}();return`${n}\n<style>${function(t="default"){let e="";return o.forEach(t=>{e+=`${t[0]}{${Object.entries(t[1]).map(t=>t[0]+":"+t[1]+";").join("")}} `}),"dark"==t&&s.forEach(t=>{e+=`${t[0]}{${Object.entries(t[1]).map(t=>t[0]+":"+t[1]+";").join("")}} `}),e}(e.style)}</style>\n<rect id="background" stroke="lightgray" stroke-width="1" width="498" height="198" x="0.5" y="0.5" rx="4" />\n<g transform="translate(15, 10)">${function(t=25,e=25){return`\n    <svg id="leetcode_icon" width="${t}" height="${e}" viewBox="0 0 94 111" version="1.1"\n        xmlns="http://www.w3.org/2000/svg"\n        xmlns:xlink="http://www.w3.org/1999/xlink">\n        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n            <g transform="translate(-2093.000000, -290.000000)">\n                <g id="1_black" transform="translate(2093.000000, 290.000000)">\n                    <path id="C" fill="#FFA116" fill-rule="nonzero" d="M67.5068339,83.0664138 C70.0005384,80.5763786 74.0371402,80.5828822 76.5228362,83.0809398 C79.0085322,85.5789975 79.00204,89.6226456 76.5083355,92.1126808 L65.4351451,103.169577 C55.2192332,113.370744 38.5604663,113.518673 28.1722578,103.513204 C28.112217,103.455678 23.486583,98.9201326 8.22702585,83.9570195 C-1.92478479,74.0028895 -2.93614945,58.0748736 6.61697549,47.8463644 L24.4286944,28.7745461 C33.9100043,18.6218594 51.3874487,17.5122246 62.2279907,26.2789232 L78.4052912,39.3620235 C81.1448956,41.5776292 81.5728103,45.5984975 79.3610655,48.3428842 C77.1493207,51.0872709 73.1354592,51.5159327 70.3958548,49.300327 L54.2186634,36.2173149 C48.5492813,31.6325105 38.631911,32.2621597 33.7398535,37.5006265 L15.9279056,56.5726899 C11.2772073,61.552182 11.7865613,69.5740156 17.1461283,74.8292186 C28.3515339,85.8169393 36.9874071,94.2846214 36.9973988,94.294225 C42.3981571,99.4959838 51.130862,99.418438 56.43358,94.1233737 L67.5068339,83.0664138 Z"></path>\n                    <path id="dash" fill="#B3B3B3" d="M40.6069914,72.0014117 C37.086019,72.0014117 34.2317068,69.142117 34.2317068,65.6149982 C34.2317068,62.0878794 37.086019,59.2285847 40.6069914,59.2285847 L87.6247154,59.2285847 C91.1456879,59.2285847 94,62.0878794 94,65.6149982 C94,69.142117 91.1456879,72.0014117 87.6247154,72.0014117 L40.6069914,72.0014117 Z"></path>\n                    <path id="L" fill="#000000" d="M49.4124315,2.02335002 C51.8178981,-0.552320454 55.852269,-0.686893945 58.4234511,1.72277172 C60.9946333,4.13243738 61.1289722,8.17385083 58.7235056,10.7495213 L15.9282277,56.5728697 C11.2773659,61.551984 11.7867168,69.5737689 17.1459309,74.8291832 L36.9094236,94.2091099 C39.4255514,96.6764051 39.4686234,100.719828 37.0056277,103.240348 C34.5426319,105.760868 30.5062548,105.804016 27.990127,103.33672 L8.22654289,83.9567041 C-1.92467414,74.0021005 -2.93603527,58.0741402 6.61751533,47.846311 L49.4124315,2.02335002 Z"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n    `}(30,30)}</g>\n<text transform="translate(60, 35)" style="font-size: 24px;">${t.username}</text>\n<text class="sub" text-anchor="end" transform="translate(485, 35)" style="font-size: 18px;">#${t.profile.ranking>1e5?"100000+":t.profile.ranking}</text>\n\n<g transform="translate(30, 80)">\n    <circle cx="40" cy="40" r="40" stroke="lightgray" stroke-width="6" />\n    <circle cx="40" cy="40" r="40" stroke="#FFA116" stroke-width="6" stroke-linecap="round" stroke-dasharray="${80*Math.PI*(t.problem.all.solved/t.problem.all.total)} 1000" transform-origin="40px 40px" transform="rotate(-90)" />\n    <g>\n        <text x="40" y="40" style="font-size: 28px;" alignment-baseline="central" dominant-baseline="central" text-anchor="middle">${t.problem.all.solved}</text>\n    </g>\n</g>\n\n<g transform="translate(160, 75)">\n    <g transform="translate(0, 0)">\n        <text style="font-size: 18px;">Easy</text>\n        <text class="sub" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${t.problem.easy.solved} / ${t.problem.easy.total}</text>\n        <line x1="0" y1="10" x2="300" y2="10" stroke="lightgray" stroke-width="4" stroke-linecap="round" />\n        <line x1="0" y1="10" x2="300" y2="10" stroke="#5cb85c" stroke-width="4" stroke-dasharray="${t.problem.easy.solved/t.problem.easy.total*300} 1000" stroke-linecap="round" />\n    </g>\n    <g transform="translate(0, 40)">\n        <text style="font-size: 18px;">Medium</text>\n        <text class="sub" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${t.problem.medium.solved} / ${t.problem.medium.total}</text>\n        <line x1="0" y1="10" x2="300" y2="10" stroke="lightgray" stroke-width="4" stroke-linecap="round" />\n        <line x1="0" y1="10" x2="300" y2="10" stroke="#f0ad4e" stroke-width="4" stroke-dasharray="${t.problem.medium.solved/t.problem.medium.total*300} 1000" stroke-linecap="round" />\n    </g>\n    <g transform="translate(0, 80)">\n        <text style="font-size: 18px;">Hard</text>\n        <text class="sub" text-anchor="end" transform="translate(300, 0)" style="font-size: 16px;">${t.problem.hard.solved} / ${t.problem.hard.total}</text>\n        <line x1="0" y1="10" x2="300" y2="10" stroke="lightgray" stroke-width="4" stroke-linecap="round" />\n        <line x1="0" y1="10" x2="300" y2="10" stroke="#d9534f" stroke-width="4" stroke-dasharray="${t.problem.hard.solved/t.problem.hard.total*300} 1000" stroke-linecap="round" />\n    </g>\n</g>\n${a}`}!async function(){addEventListener("fetch",t=>{let e=async function(t){const e=t.request;if("GET"!==e.method)return new Response("Allowed Method: GET");const n=function(t){let e={};return[...t.entries()].forEach(t=>{e[t[0]]=t[1]}),Object.assign({},a,e)}(new URL(e.url).searchParams);if(console.log("Final Parameters",n),n.username){const t=await r(n.username);console.log("Leetcode Data",t);let e=new Response(i(t,n),{headers:{"content-type":"image/svg+xml; charset=utf-8"}});return(o=e.headers).set("Access-Control-Allow-Origin","*"),o.set("Access-Control-Allow-Credentials",!0),e}return new Response("\n<html>\n    <head>\n        <title>Leetcode Stats Card</title>\n    </head>\n    <body>\n        <h1>Leetcode Stats Card</h1>\n    </body>\n</html>\n",{headers:{"Content-Type":"text/html; charset=utf-8"}});var o}(t);t.respondWith(e)})}()}]);