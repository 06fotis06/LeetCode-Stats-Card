!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const o={username:null,style:"default",animation:!0,width:500,height:200,border:1,border_radius:4,font:null,extension:null};const a="https://leetcode.com";async function s(e){let t=new Request(a+"/graphql/"+e),n=caches.default,o=await n.match(t);if(!o){const a=await async function(){return(await fetch("https://leetcode.com/",{headers:{"user-agent":"Mozilla/5.0 LeetCode Stats Card"}}).then(e=>e.headers.get("set-cookie"))).split(";").map(e=>e.trim().split("=")).find(e=>e[0].includes("csrftoken"))[1]}();o=await fetch("https://leetcode.com/graphql",{method:"POST",headers:{"content-type":"application/json",origin:"https://leetcode.com",referer:`https://leetcode.com/${e}/`,cookie:`csrftoken=${a}; `,"x-csrftoken":a,"user-agent":"Mozilla/5.0 LeetCode Stats Card"},body:JSON.stringify({operationName:"getUserProfile",variables:{username:e},query:"\n                query getUserProfile($username: String!) {\n                    allQuestionsCount {\n                        difficulty\n                        count\n                    }\n                    matchedUser(username: $username) {\n                        username\n                        socialAccounts\n                        githubUrl\n                        contributions {\n                            points\n                            questionCount\n                            testcaseCount\n                        }\n                        profile {\n                            realName\n                            websites\n                            countryName\n                            skillTags\n                            company\n                            school\n                            starRating\n                            aboutMe\n                            userAvatar\n                            reputation\n                            ranking\n                        }\n                        submissionCalendar\n                        submitStats {\n                            acSubmissionNum {\n                                difficulty\n                                count\n                                submissions\n                            }\n                            totalSubmissionNum {\n                                difficulty\n                                count\n                                submissions\n                            }\n                        }\n                        badges {\n                            id\n                            displayName\n                            icon\n                            creationDate\n                        }\n                        upcomingBadges {\n                            name\n                            icon\n                        }\n                        activeBadge {\n                            id\n                        }\n                    }\n                    recentSubmissionList(username: $username, limit: 5) {\n                        title\n                        titleSlug\n                        timestamp\n                        statusDisplay\n                        lang\n                    }\n                }\n                "})}),o=new Response(o.body,o),o.headers.append("Cache-Control","s-maxage=60, maxage=60"),n.put(t,o.clone())}const s=await o.json();return{username:s.data.matchedUser.username,profile:{name:s.data.matchedUser.profile.realName||null,avatar:s.data.matchedUser.profile.userAvatar||null,about:s.data.matchedUser.profile.aboutMe,country:s.data.matchedUser.profile.countryName||null,skills:s.data.matchedUser.profile.skillsTags,company:s.data.matchedUser.profile.company||null,school:s.data.matchedUser.profile.school||null,ranking:s.data.matchedUser.profile.ranking,reputation:s.data.matchedUser.profile.reputation},social:{website:s.data.matchedUser.profile.websites.length?s.data.matchedUser.profile.websites[0]:null,github:s.data.matchedUser.githubUrl||null},contribution:{point:s.data.matchedUser.contributions.points,question:s.data.matchedUser.contributions.questionCount,testcase:s.data.matchedUser.contributions.testcaseCount},calendar:JSON.parse(s.data.matchedUser.submissionCalendar),problem:{all:{total:s.data.allQuestionsCount.find(e=>"All"===e.difficulty).count,solved:s.data.matchedUser.submitStats.acSubmissionNum.find(e=>"All"===e.difficulty).count},easy:{total:s.data.allQuestionsCount.find(e=>"Easy"===e.difficulty).count,solved:s.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Easy"===e.difficulty).count},medium:{total:s.data.allQuestionsCount.find(e=>"Medium"===e.difficulty).count,solved:s.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Medium"===e.difficulty).count},hard:{total:s.data.allQuestionsCount.find(e=>"Hard"===e.difficulty).count,solved:s.data.matchedUser.submitStats.acSubmissionNum.find(e=>"Hard"===e.difficulty).count}},badge:{active:s.data.matchedUser.activeBadge,owned:s.data.matchedUser.badges.map(e=>(e.icon.includes("http")||(e.icon=a+e.icon),e)),upcoming:s.data.matchedUser.upcomingBadges.map(e=>(e.icon.includes("http")||(e.icon=a+e.icon),e))},activity:s.data.recentSubmissionList.map(e=>({title:e.title,problem:a+"/problems/"+e.titleSlug+"/",lang:e.lang,time:new Date(1e3*parseInt(e.timestamp)),status:e.statusDisplay}))}}function i(e=500,t=200,n=500,o=200){return[`<svg xmlns="http://www.w3.org/2000/svg" width="${e}" height="${t}" viewBox="0 0 ${n} ${o}" fill="none">`,"</svg>"]}function r(e=25,t=25){return`\n    <svg id="leetcode_icon" width="${e}" height="${t}" viewBox="0 0 94 111" version="1.1"\n        xmlns="http://www.w3.org/2000/svg"\n        xmlns:xlink="http://www.w3.org/1999/xlink">\n        <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n            <g transform="translate(-2093.000000, -290.000000)">\n                <g id="1_black" transform="translate(2093.000000, 290.000000)">\n                    <path id="C" fill="#FFA116" fill-rule="nonzero" d="M67.5068339,83.0664138 C70.0005384,80.5763786 74.0371402,80.5828822 76.5228362,83.0809398 C79.0085322,85.5789975 79.00204,89.6226456 76.5083355,92.1126808 L65.4351451,103.169577 C55.2192332,113.370744 38.5604663,113.518673 28.1722578,103.513204 C28.112217,103.455678 23.486583,98.9201326 8.22702585,83.9570195 C-1.92478479,74.0028895 -2.93614945,58.0748736 6.61697549,47.8463644 L24.4286944,28.7745461 C33.9100043,18.6218594 51.3874487,17.5122246 62.2279907,26.2789232 L78.4052912,39.3620235 C81.1448956,41.5776292 81.5728103,45.5984975 79.3610655,48.3428842 C77.1493207,51.0872709 73.1354592,51.5159327 70.3958548,49.300327 L54.2186634,36.2173149 C48.5492813,31.6325105 38.631911,32.2621597 33.7398535,37.5006265 L15.9279056,56.5726899 C11.2772073,61.552182 11.7865613,69.5740156 17.1461283,74.8292186 C28.3515339,85.8169393 36.9874071,94.2846214 36.9973988,94.294225 C42.3981571,99.4959838 51.130862,99.418438 56.43358,94.1233737 L67.5068339,83.0664138 Z"></path>\n                    <path id="dash" fill="#B3B3B3" d="M40.6069914,72.0014117 C37.086019,72.0014117 34.2317068,69.142117 34.2317068,65.6149982 C34.2317068,62.0878794 37.086019,59.2285847 40.6069914,59.2285847 L87.6247154,59.2285847 C91.1456879,59.2285847 94,62.0878794 94,65.6149982 C94,69.142117 91.1456879,72.0014117 87.6247154,72.0014117 L40.6069914,72.0014117 Z"></path>\n                    <path id="L" fill="#000000" d="M49.4124315,2.02335002 C51.8178981,-0.552320454 55.852269,-0.686893945 58.4234511,1.72277172 C60.9946333,4.13243738 61.1289722,8.17385083 58.7235056,10.7495213 L15.9282277,56.5728697 C11.2773659,61.551984 11.7867168,69.5737689 17.1459309,74.8291832 L36.9094236,94.2091099 C39.4255514,96.6764051 39.4686234,100.719828 37.0056277,103.240348 C34.5426319,105.760868 30.5062548,105.804016 27.990127,103.33672 L8.22654289,83.9567041 C-1.92467414,74.0021005 -2.93603527,58.0741402 6.61751533,47.846311 L49.4124315,2.02335002 Z"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n    `}const l=[[".leetcode_stats_card *",{"font-family":'"Segoe UI", "PingFang SC", Ubuntu, Sans-Serif',"transform-box":"fill-box"}],[".leetcode_stats_card text, .leetcode_stats_card .text",{"font-weight":"bold",fill:"rgb(38, 38, 38)",color:"rgb(38, 38, 38)"}],[".leetcode_stats_card text.sub, .leetcode_stats_card .sub_text",{fill:"rgb(128, 128, 128)",color:"rgb(128, 128, 128)"}],[".leetcode_stats_card rect#background, .leetcode_stats_card .theme_background",{fill:"#ffffff",background:"#ffffff"}],[".leetcode_stats_card #head",{transform:"translate(0px, 0px)"}],[".leetcode_stats_card #body",{transform:"translate(0px, 80px)"}],["#total_solved_circle .circle_bg, #solved_details .progress_bg",{stroke:"rgb(229, 229, 229)"}],["#total_solved_circle .circle",{"transform-box":"fill-box",transform:"rotate(-90deg)"}],["#solved_details .difficulty",{"font-size":"18px"}],["#solved_details .solved",{"font-size":"16px","text-anchor":"end",transform:"translate(300px, 0px)"}],["#solved_details .progress_bg, #solved_details .progress",{"stroke-width":"4","stroke-linecap":"round"}]],d=[["path#L",{fill:"#ffffff"}],[".leetcode_stats_card rect#background, .leetcode_stats_card .theme_background",{fill:"#101010",background:"#101010"}],[".leetcode_stats_card text, .leetcode_stats_card .text",{fill:"rgb(240, 240, 240)",color:"rgb(240, 240, 240)"}],[".leetcode_stats_card text.sub, .leetcode_stats_card .sub_text",{fill:"rgb(220, 220, 220)",color:"rgb(220, 220, 220)"}],["#total_solved_circle .circle_bg, #solved_details .progress_bg",{stroke:"rgb(64, 64, 64)"}]],c=[[".leetcode_stats_card rect#background, .leetcode_stats_card .theme_background",{fill:"#fff9dd",background:"#fff9dd"}],["#total_solved_circle .circle",{stroke:"#80c600"}],["#easy_solved .progress",{stroke:"#1abc97"}],["#medium_solved .progress",{stroke:"#8ec941"}],["#hard_solved .progress",{stroke:"#a36d00"}],["#total_solved_circle .circle_bg, #solved_details .progress_bg",{stroke:"#ffec96"}]],u=[[".leetcode_stats_card",{animation:"wtf_animation 1s linear 0s infinite forwards"}],"@keyframes wtf_animation {\n        from { filter: hue-rotate(0deg); } to { filter: hue-rotate(360deg); }\n    }"],m="\n@keyframes fade_in {\n    from {\n        opacity: 0;\n    }\n    to {\n        opacity: 1;\n    }\n}\n".split("\n").map(e=>e.trim()).join(" "),f=[["#icon",{opacity:0}],["#username",{opacity:0}],["#rank",{opacity:0}],[".circle_bg",{opacity:0}],[".circle",{opacity:0}],["#total_solved",{opacity:0}],["#easy_solved .difficulty",{opacity:0}],["#easy_solved .solved",{opacity:0}],["#easy_solved .progress_bg",{opacity:0}],["#easy_solved .progress",{opacity:0}],["#medium_solved .difficulty",{opacity:0}],["#medium_solved .solved",{opacity:0}],["#medium_solved .progress_bg",{opacity:0}],["#medium_solved .progress",{opacity:0}],["#hard_solved .difficulty",{opacity:0}],["#hard_solved .solved",{opacity:0}],["#hard_solved .progress_bg",{opacity:0}],["#hard_solved .progress",{opacity:0}],["#extension",{opacity:0}]];for(let e=0;e<f.length;e++)f[e][1].animation=`fade_in 0.3s ease ${(.1*e).toFixed(2)}s 1 forwards`;const p=[["#extension",{background:"transparent"}]];let g="";function h({data:e,parameters:t}){return t.font&&(g+=`g.leetcode_stats_card * {font-family: "${decodeURIComponent(t.font)}", "Segoe UI", "PingFang SC", Ubuntu, Sans-Serif; } `),b(l),"auto"==t.style&&(g+="@media (prefers-color-scheme: dark) { ",b(d),g+="} ",console.log("Load Style: ","auto")),"dark"==t.style&&(b(d),console.log("Load Style: ","dark")),"forest"==t.style&&(b(c),console.log("Load Style: ","forest")),"wtf"==t.style&&(b(u),console.log("Load Style: ","wtf")),"false"!=t.animation&&0!=Number(t.animation)&&(b(f),g+=m,e&&(g+=function(e,t=0,n=0){const o=Math.floor(1e3*Math.random());return`@keyframes circle_${o} { 0% { opacity: 0; stroke-dasharray: 0 1000; } 50% { opacity: 1; } 100% { opacity: 1; stroke-dasharray: ${t} 1000; } }`+`${e} { animation: circle_${o} 1.2s ease ${n}s 1 forwards }`}(".circle",80*Math.PI*(e.problem.all.solved/e.problem.all.total),.7)),console.log("Load Style: ","animation")),t.extension&&(b(p),console.log("Load Style: ","extension")),g}function b(e){e.forEach(e=>{g+="string"==typeof e?e:`${e[0]}{${Object.entries(e[1]).map(e=>e[0]+":"+e[1]+";").join("")}} `})}let y="\n#ext_flex_box {\n    height: 100%; \n    display: flex; \n    flex-direction: column; \n    justify-content: flex-start;\n    overflow: hidden auto;\n}\n#ext_flex_box::-webkit-scrollbar, .ext_link::-webkit-scrollbar {\n    display: none;\n}\n.ext_link {\n    white-space: nowrap;\n    text-decoration: none;\n    overflow: auto hidden;\n}\n.ext_submission_wrap {\n    display: flex;\n    margin: 4px 0;\n}\n.ext_time, .ext_submission, .ext_lang {\n    padding: 1px 4px;\n    border-radius: 4px;\n    margin: 0 6px 0 0;\n}\n.ext_time {\n    min-width: 64px;\n    padding: 0;\n}\n.ext_submission.AC {\n    background: rgb(76, 175, 80);\n    color: #ffffff;\n}\n.ext_submission.WA, .ext_submission.TLE, .ext_submission.MLE, .ext_submission.OLE, .ext_submission.RE, .ext_submission.CE, .ext_submission.SE {\n    background: rgb(233, 30, 99);\n    color: #ffffff;\n}\n.ext_submission.Unknown {\n    background: rgb(0, 0, 0);\n    color: #ffffff;\n}\n.ext_lang {\n    background: rgb(64, 196, 255);\n    color: #ffffff;\n}\n.theme_dark .ext_submission.AC {\n    background: rgb(56 155 60);\n}\n.theme_dark .ext_lang {\n    background: rgb(34 166 225);\n}\n";let x=['<g id="extension" transform="translate(0, 200)">',"</g>"];function _(e,t){return"activity"==t.extension?`${x[0]}\n        <line x1="10" y1="0" x2="${t.width-10}" y2="0" stroke="lightgray" stroke-width="1" style="${t.animation?"opacity: 0; animation: fade_in 1 0.3s 1.8s forwards;":""}"></line>\n        ${function(e,t){let n=e.activity.slice(0,10),o="";o+=`<text x="20" y="20" style="${t.animation?"opacity: 0; animation: fade_in 1 0.3s 1.7s forwards;":""}">Recent Activities</text>`,o+='<foreignObject x="20" y="30" width="460" height="160"><div id="ext_flex_box" xmlns="http://www.w3.org/1999/xhtml">';for(let e=0;e<n.length;e++){let t="Unknown";switch(n[e].status){case"Accepted":t="AC";break;case"Wrong Answer":t="WA";break;case"Time Limit Exceeded":t="TLE";break;case"Memory Limit Exceeded":t="MLE";break;case"Output Limit Exceeded":t="OLE";break;case"Runtime Error":t="RE";break;case"Compile Error":t="CE";break;case"System Error":t="SE"}o+=`\n            <div class="ext_submission_wrap" style="animation-delay: ${(1.8+.1*e).toFixed(2)}s">\n                <span class="ext_time sub_text">${n[e].time.getFullYear()%100}.${n[e].time.getMonth()+1}.${n[e].time.getDate()}</span>\n                <span class="ext_submission ${t}">${t}</span>\n                <span class="ext_lang">${n[e].lang}</span>\n                <a class="ext_link sub_text" target="_blank" href="${n[e].problem}"><span>${n[e].title}</span></a>\n            </div>\n        `}return t.animation&&(y+=".ext_submission_wrap { animation: fade_in 0.3s ease 1 backwards; }"),o+=`<style>${y}</style>`,o+="</div></foreignObject>",o}(e,t)}\n        ${x[1]}`:""}!async function(){addEventListener("fetch",e=>{let t=async function(e){const t=e.request;if("GET"!==t.method)return new Response("Allowed Method: GET");if("https://leetcode.card.workers.dev/favicon.ico"==t.url)return Response.redirect("https://raw.githubusercontent.com/JacobLinCool/leetcode-stats-card/main/favicon/leetcode.ico",301);const n=function(e){let t={};return[...e.entries()].forEach(e=>{t[e[0]]=e[1]}),void 0!==t.width&&Number(t.height)<400&&(t.extension=!1),"activity"==t.extension&&void 0===t.height&&(t.height=400),void 0!==t.width&&(t.width=Number(t.width)),void 0!==t.height&&(t.height=Number(t.height)),void 0!==t.style&&(t.style=t.style.toLowerCase()),void 0!==t.animation&&("false"!==t.animation&&"0"!==t.animation||(t.animation=!1),t.animation=!!t.animation),console.log("Custom Parameters",t),Object.assign({},o,t)}(new URL(t.url).searchParams);if(console.log("Final Parameters",n),n.username){const o=new Request(t.url,t),l=caches.default;let d=await l.match(o);if(!d){try{const e=await s(n.username);console.log("Leetcode Data",e),d=new Response(function(e,t){const[n,o]=i(t.width,t.height,500,"activity"==t.extension?400:200);return`${n}<title>${e.username} | LeetCode Stats Card</title>\n${t.font?`<link xmlns="http://www.w3.org/1999/xhtml" rel="stylesheet" href="https://fonts.googleapis.com/css2?family=${decodeURIComponent(t.font).replace(/ /g,"+")}&amp;display=swap" type="text/css"/>`:""}\n<style>${h({parameters:t,data:e})}</style>\n<g class="leetcode_stats_card theme_${t.style}">\n    <rect id="background" stroke="lightgray" stroke-width="${t.border}" width="${500-t.border}" height="${("activity"==t.extension?400:200)-t.border}" x="${t.border/2}" y="${t.border/2}" rx="${t.border_radius}" />\n    <g id="head">\n        <a href="https://leetcode.com/${e.username}/" target="_blank">\n            <g id="icon" transform="translate(20, 15)">${r(30,30)}</g>\n            <text id="username" transform="translate(65, 40)" style="font-size: 24px;">${e.username}</text>\n            <text id="rank" class="sub" text-anchor="end" transform="translate(480, 40)" style="font-size: 18px;">#${e.profile.ranking>1e5?"100000+":e.profile.ranking}</text>\n        </a>\n    </g>\n    <g id="body">\n        <g id="total_solved_circle" transform="translate(30, 5)">\n            <circle class="circle_bg" cx="40" cy="40" r="40" stroke-width="6" />\n            <circle class="circle" cx="40" cy="40" r="40" stroke="#ffa116" stroke-width="6" stroke-linecap="round" stroke-dasharray="0 1000" transform-origin="40px 40px" />\n            <g>\n                <text id="total_solved" x="40" y="40" style="font-size: 28px;" alignment-baseline="central" dominant-baseline="central" text-anchor="middle">${e.problem.all.solved}</text>\n            </g>\n        </g>\n        <g id="solved_details" transform="translate(160, 0)">\n            <g id="easy_solved" transform="translate(0, 0)">\n                <text class="difficulty">Easy</text>\n                <text class="sub solved">${e.problem.easy.solved} / ${e.problem.easy.total}</text>\n                <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" />\n                <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#5cb85c" stroke-dasharray="${e.problem.easy.solved/e.problem.easy.total*300} 1000" />\n            </g>\n            <g id="medium_solved" transform="translate(0, 40)">\n                <text class="difficulty">Medium</text>\n                <text class="sub solved">${e.problem.medium.solved} / ${e.problem.medium.total}</text>\n                <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" />\n                <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#f0ad4e" stroke-dasharray="${e.problem.medium.solved/e.problem.medium.total*300} 1000" />\n            </g>\n            <g id="hard_solved" transform="translate(0, 80)">\n                <text class="difficulty">Hard</text>\n                <text class="sub solved">${e.problem.hard.solved} / ${e.problem.hard.total}</text>\n                <line class="progress_bg" x1="0" y1="10" x2="300" y2="10" />\n                <line class="progress" x1="0" y1="10" x2="300" y2="10" stroke="#d9534f" stroke-dasharray="${e.problem.hard.solved/e.problem.hard.total*300} 1000" />\n            </g>\n        </g>\n    </g>\n    ${_(e,t)}\n</g>\n${o}`.split("\n").map(e=>e.trim()).join(" ")}(e,n),{headers:{"Content-Type":"image/svg+xml; charset=utf-8","Cache-Control":"s-maxage=60, maxage=60","Content-Disposition":`inline; filename=${e.username}.stats.svg`}}),(a=d.headers).set("Access-Control-Allow-Origin","*"),a.set("Access-Control-Allow-Credentials",!0)}catch(e){return new Response(function(e){const[t,n]=i(500,200,500,200);return`${t}\n<style>${h(e)}</style>\n<g class="leetcode_stats_card theme_${e.style}">\n    <rect id="background" stroke="lightgray" stroke-width="${e.border}" width="${500-e.border}" height="${200-e.border}" x="${e.border/2}" y="${e.border/2}" rx="${e.border_radius}" />\n    <g id="icon" transform="translate(30, 65)">${r(60,60)}</g>\n    <text transform="translate(100, 115)" style="font-size: 48px; ${e.animation?"opacity: 0; animation: fade_in 1 0.3s 0.1s forwards;":""}">User Not Found</text>\n    <a target="_blank" href="https://github.com/JacobLinCool/leetcode-stats-card"><text class="sub" transform="translate(480, 180)" text-anchor="end" style="${e.animation?"opacity: 0; animation: fade_in 1 0.8s 0.8s forwards;":""}">LeetCode Status Card</text></a>\n</g>\n${n}`}(n),{headers:{"Content-Type":"image/svg+xml; charset=utf-8"},status:404,statusText:"Not Found"})}e.waitUntil(l.put(o,d.clone()))}return d}return new Response('\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="UTF-8" />\n        <link rel="icon" href="https://raw.githubusercontent.com/JacobLinCool/leetcode-stats-card/main/favicon/leetcode.ico" />\n        <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n        <title>LeetCode Stats Card</title>\n        <meta property="og:title" content="LeetCode Stats Card" />\n        <meta property="og:description" content="A simple tool for every leetcoder. Show your leetcode stats on your GitHub profile or your website!" />\n    </head>\n    <body>\n        <h1>LeetCode Stats Card</h1>\n        <input id="username" placeholder="Your LeetCode Username">\n        <select id="style">\n            <option value="default" selected>Default Style</option>\n            <option value="dark">Dark</option>\n            <option value="forest">Forest</option>\n            <option value="wtf">WTF</option>\n            <option value="auto">Auto (Beta)</option>\n        </select>\n        <select id="font">\n            <option value="" selected>Default ("Segoe UI", "PingFang SC", Ubuntu, Sans-Serif)</option>\n            <option value="Arial">Arial</option>\n            <option value="Verdana">Verdana</option>\n            <option value="Helvetica">Helvetica</option>\n            <option value="Tahoma">Tahoma</option>\n            <option value="Trebuchet MS">Trebuchet MS</option>\n            <option value="Times New Roman">Times New Roman</option>\n            <option value="Georgia">Georgia</option>\n            <option value="Garamond">Garamond</option>\n            <option value="Courier New">Courier New</option>\n            <option value="Brush Script MT">Brush Script MT</option>\n        </select>\n        <select id="extension">\n            <option value="null" selected>No Extension</option>\n            <option value="activity">Activity (Beta)</option>\n        </select>\n        <div>\n            <button onclick="preview()">Preview</button>\n            <button onclick="go()">Go</button>\n            <button onclick="md()">Markdwon</button>\n        </div>\n        <div>\n            <img id="preview" src="https://leetcode.card.workers.dev/?username=JacobLinCool"></img>\n        </div>\n        <div style="height: 20px;"></div>\n        <div>\n            <a href="https://github.com/JacobLinCool/leetcode-stats-card">View on GitHub</a>\n        </div>\n        <style>\n            html, body {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n\n                font-family: sans-serif;\n            }\n            h1 {\n                margin: 8px 0;\n            }\n            input, select {\n                width: 320px;\n                margin: 8px 0;\n                padding: 2px;\n            }\n            button {\n                width: 100px;\n                margin: 8px;\n            }\n            div {\n                width: 320px;\n                margin: 8px 0;\n\n                display: flex;\n                flex-direction: row;\n                justify-content: center;\n                align-items: center;\n            }\n            img {\n                width: 100%;\n                min-height: 128px;\n            }\n        </style>\n        <script>\n            // get_fonts();\n            \n            function url() {\n                if(!document.querySelector("#username").value.trim()) document.querySelector("#username").value = "JacobLinCool";\n                return location.origin + "/?username=" + document.querySelector("#username").value.trim() + "&style=" + document.querySelector("#style").value + "&font=" + document.querySelector("#font").value + "&extension=" + document.querySelector("#extension").value;\n            }\n            function preview() {\n                document.querySelector("#preview").src = url();\n            }\n            function go() {\n                let win = window.open();\n                win.location = url()\n            }\n            function md() {\n                let code = "![LeetCode Stats](" + url() + ")";\n                prompt("Markdown Code: ", code);\n            }\n            function get_fonts() {\n                fetch("https://raw.githubusercontent.com/JacobLinCool/LeetCode-Stats-Card/main/google-fonts-list.json").then(r => r.json()).then(list => {\n                    let select = document.querySelector("#font");\n                    Object.entries(list).forEach(([type, fonts]) => {\n                        let optgroup = document.createElement("optgroup");\n                        optgroup.label = type[0].toUpperCase() + type.substr(1);\n                        fonts.forEach(font => {\n                            let option = document.createElement("option");\n                            option.innerHTML = font;\n                            option.value = font;\n                            optgroup.appendChild(option);\n                        })\n                        select.appendChild(optgroup);\n                    });\n                })\n            }\n        <\/script>\n    </body>\n</html>\n',{headers:{"Content-Type":"text/html; charset=utf-8"}});var a}(e);e.respondWith(t)})}()}]);